stages:
  - lint
  - build
  - deploy
  - review

default:
  image: node:16-alpine

  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/

  before_script:
    - npm ci --cache .npm --prefer-offline --no-audit

.setup_ssh:
  before_script:
    - which ssh-agent || apk add --update bash openssh curl git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan -t ecdsa -H $SSH_HOST >> ~/.ssh/known_hosts

eslint:
  stage: lint
  script:
    - npm run lint

prettier:
  stage: lint
  script:
    - npm run check:format

build:
  stage: build
  variables:
    REACT_APP_BACKEND_URL: http://$CI_COMMIT_REF_SLUG.$APP_HOST/api
  script:
    - npm run build
  artifacts:
    paths:
      - build
    expire_in: 1 week

deploy:
  stage: deploy
  extends:
    - .setup_ssh
  variables:
    DEPLOY_DEST_DIR: /home/$SSH_USER/app/$CI_COMMIT_REF_SLUG/current/public
  script:
    - ssh $SSH_USER@$SSH_HOST mkdir -p $DEPLOY_DEST_DIR
    - scp -r build/* $SSH_USER@$SSH_HOST:$DEPLOY_DEST_DIR
  environment:
    name: production
    url: http://$CI_COMMIT_REF_SLUG.$APP_HOST/

create_review_app:
  stage: review
  extends:
    - .setup_ssh
  variables:
    BRANCH_EXISTS_URL: https://gitlab.com/api/v4/projects/$BACKEND_PROJECT_ID/repository/branches/$CI_COMMIT_REF_NAME
    CREATE_BRANCH_URL: https://gitlab.com/api/v4/projects/$BACKEND_PROJECT_ID/repository/branches?branch=$CI_COMMIT_REF_NAME&ref=$CI_DEFAULT_BRANCH
    TRIGGER_PIPELINE_URL: https://gitlab.com/api/v4/projects/$BACKEND_PROJECT_ID/pipeline?ref=$CI_COMMIT_REF_NAME
  script:
    - 'status_code=$(curl -I --header "PRIVATE-TOKEN: $PAT_TOKEN" --write-out "%{http_code}" --silent --output /dev/null "$BRANCH_EXISTS_URL")'
    - '[[ "$status_code" -ne 204 ]] && status_code=$(curl -X POST --header "PRIVATE-TOKEN: $PAT_TOKEN" --write-out "%{http_code}" --silent --output /dev/null "$CREATE_BRANCH_URL")'
    - '[[ "$status_code" -ne 400 ]] && echo "Branch already exists" && exit 0'
    - 'curl -X POST --header "PRIVATE-TOKEN: $PAT_TOKEN" --write-out "%{http_code}" --silent --output /dev/null "$TRIGGER_PIPELINE_URL"'
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_SLUG.$APP_HOST/
    on_stop: remove_review_app
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /\[SKIP REVIEW\]/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

remove_review_app:
  stage: review
  extends:
    - .setup_ssh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  variables:
    DEPLOY_DEST_DIR: /home/$SSH_USER/app/$CI_COMMIT_REF_SLUG
  script:
    - ssh $SSH_USER@$SSH_HOST pm2 delete $DEPLOY_DEST_DIR/current/ecosystem.config.js
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /\[SKIP REVIEW\]/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual

reset_db:
  stage: review
  extends:
    - .setup_ssh
  variables:
    DEPLOY_DEST_DIR: /home/$SSH_USER/app/$CI_COMMIT_REF_SLUG
    DB_NAME: $CI_COMMIT_REF_SLUG
  script:
    - ssh $SSH_USER@$SSH_HOST cd $DEPLOY_DEST_DIR/current/bin/create-db-copy.sh $DB_NAME
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /\[SKIP REVIEW\]/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
